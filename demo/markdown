# Grep en Java

En este ejercicio implemento un filtrado de texto similar al comando `grep`, donde le paso un bloque de texto al programa y filtro las líneas que contienen la palabra **PSP**.

Para ello, he creado la clase `Grep.java`, donde desarrollo la lógica del programa que realiza el filtrado de texto.

## Grep.java
### 1.Constantes
```java
public static final String[] COMANDOS = { "grep", "PSP" };
```
Definimos el comando que vamos a ejecutar, el cual busca las líneas que contienen la palabra **PSP**.

```java
private final static String texto = "Me gusta PSP y java\n" +
            "PSP se programa en java\n" +
            "es un módulo de DAM\n" +
            "y se programa de forma concurrente en PSP\n" +
            "PSP es programación.\n";
```
Definimos el texto sobre el que vamos aplciar el filtrado.
```java
private final static String errorGrep = "Error al ejecutar grep";
```
Definimos el texto de error en caso de que falle el grep.

### 2.Método ``Main``

```java
 try {
            Process proceso = Runtime.getRuntime().exec(COMANDOS);
            escribirTextoEnProceso(proceso);

            System.out.println(filtrarPSP(texto));

            int exitVal = proceso.waitFor();
            if (exitVal != 0) {
                System.err.println(errorGrep);
            }

        } catch (IOException |

                InterruptedException e) {
            System.exit(34);
        }
```
Primero, dentro del bloque try, se ejecuta el comando externo ``grep PSP`` como un nuevo proceso. A continuación, enviamos el texto al proceso mediante la salida estándar utilizando el método ``escribirTextoEnProceso()``. Seguidamente, obtenemos el resultado del filtrado directamente en Java con el método ``filtrarPSP()``.
Después, esperamos a que el proceso externo finalice y, si devuelve un valor distinto de cero, mostramos el mensaje de error correspondiente. Finalmente, si ocurre alguna excepción durante la ejecución, el bloque catch captura el fallo y el programa termina mostrando el código de salida 34.

### 3.Método ``escribirTextoEnProceso()``

```java
public static void escribirTextoEnProceso(Process proceso) {
        try (PrintWriter pw = new PrintWriter(new OutputStreamWriter(proceso.getOutputStream()))) {
            pw.println(texto);
            pw.close();
        }
    }
```
Escribe el texto de la entrada estandar del proceso grep y envia el texto linea por linea al proceso externo.

### 4.Método ``filtrarPSP()``
```java
public static String filtrarPSP(String texto)
```
Filtro con el metodo las lineas que contiene PSP.

```java
StringBuilder resultado = new StringBuilder();
```
Se crea un contenedor para ir acumulando las líneas filtradas.

```java
try (BufferedReader lectura = new BufferedReader(new java.io.StringReader(texto))) {
            String linea;
            while ((linea = lectura.readLine()) != null) {
                if (linea.contains("PSP")) {
                    resultado.append(linea).append("\n");
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        } 
```
Leemos el texto linea por liena y guardo en resultado aquellas que contienen **PSP**.

## TEST JUnit
Los test de JUnit estan realizados en GrepTest.java, donde he hehci los sigueitnes test:
### 1.``testFiltradoPSP()``
```java
@Test
    void testFiltradoPSP() {
        String input = "Me gusta PSP y java\nNo me gusta Python\nPSP es programación";
        String esperado = "Me gusta PSP y java\nPSP es programación\n";
        assertEquals(esperado, Grep.filtrarPSP(input));
    }
``` 
Devuelve uniamente la lsitas que tienen **PSP**.

### 2.``testSinPSP()``
```java
@Test
    void testSinPSP() {
        String input = "Hola mundo\nJava es genial";
        assertEquals("", Grep.filtrarPSP(input));
    }
```
Comprobamos si realmente hace bien el filtrado.

### 3. ``testMultiplesCoincidencias()``
```java
@Test
    void testMultiplesCoincidencias() {
        String input = "PSP 1\nPSP 2\nPSP 3";
        String esperado = "PSP 1\nPSP 2\nPSP 3\n";
        assertEquals(esperado, Grep.filtrarPSP(input));
    }
```
Comprobamos que el método ``filtrarPSP()`` detecta correctamente múltiples líneas que contienen PSP y las devuelve todas en el orden original.

